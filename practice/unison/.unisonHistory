view base.data.List.foldl
view base.Either.mapRight
view base.Optional.map
docs base.Optional.map
docs base.Optional.mapRight
docs mapRight
view base.Optional
view base.data.List.unfold
view base.data.List.unfold
docs base.data.List.unfold
docs List.unfold
view 165
docs 165
docs 162
ls base.data.List
docs base.data.List.take
docs take
ls base.data.List
ls base.Either
ls base.Either
find Either
base.Either
ls base.data.Either
ls base.abilities.Throw
ls base.abilities.Abort
find  Eq
ls base.data.List
ls base.data.List
ls base.data.List
docs tail
docs at
docs Nat
docs 118
ls base.data.List
ls 161
ls base.data.List
ls 161
ls 147
ls base.data.List
docs 182
docs 160
docs 148
docs 146
docs 138
docs 126
ls base.data.List
docs 123
docs 91
docs 89
ls base.data.List
cd ..
ls lib
lib.base.data.List.mapIndexed (fun a b -> b) ["a", "b", "c"]
base.data.List.mapIndexed (fun a b -> b) ["a", "b", "c"]
cd learn
base.data.List.mapIndexed (fun a b -> b) ["a", "b", "c"]
base.data.List.mapIndexed (fun a b -> b) ["a", "b", "c"]
mapIndexed (fun a b -> b) ["a", "b", "c"]
mapIndexed ["a", "b", "c"]
view 108
docs 109
docs 108
ls base.data.List
docs 74
docs 73
docs 72
docs 71
docs 70
docs 69
docs 68
ls base.data.List
docs base.data.List.groupBy
docs base.data.List.dropWhile
docs base.data.List.chunk
view 15
ls base.data.List
find partition
ls base.Nat
docs base.data.List.foldLeft
docs base.data.List.foldLeft
docs base.data.List.foldRight
find foldr
view 4
ls base.Nat
docs base.data.List.foldl
docs foldl
help
run Nat.fromText "2"
docs base.Nat.pow
docs base.Nat.pow
find pow
ls base.math.Natural
ls base.math
ls base.Nat
ls base.Text
ls base.Nat
ls base.Nat
Char.toNat ?1
toNat ?1
docs base.Char.toNat
